name: Build and Release KVCache C++ Packages

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发
  workflow_dispatch:  # 允许手动触发

# 添加权限设置
permissions:
  contents: write
  actions: read

jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: ubuntu-22.04
            arch: amd64
            platform: linux/amd64
          - runner: ubuntu-22.04  # 使用更新的 Ubuntu 版本，Docker 容器仍使用 ubuntu:20.04
            arch: arm64
            platform: linux/arm64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up QEMU (for ARM64 emulation)
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
        
    - name: Create output directory
      run: |
        mkdir -p .output
        mkdir -p .output_logs
        
    - name: Run containerized build
      run: |
        # 为不同架构设置基础镜像（去掉架构前缀，让Docker自动处理）
        BASE_IMAGE="ubuntu:20.04"
        
        echo "Building for architecture: ${{ matrix.arch }}"
        echo "Using base image: $BASE_IMAGE"
        echo "Target platform: ${{ matrix.platform }}"
        
        # 设置 Docker 平台环境变量
        export DOCKER_DEFAULT_PLATFORM=${{ matrix.platform }}
        
        # 运行构建脚本
        python3 pack_in_container.py --image "$BASE_IMAGE" --mount-dir .output --logs-dir .output_logs
        
    - name: Verify build output
      run: |
        echo "Build output contents:"
        ls -la .output/
        
        echo "Build logs contents:"
        ls -la .output_logs/
        
        # 检查构建结果
        if [ -f .output_logs/build_summary.txt ]; then
          echo "Build summary:"
          cat .output_logs/build_summary.txt
        fi
        
        if [ -f .output_logs/build_report.json ]; then
          echo "Build report exists"
          echo "Build report content:"
          cat .output_logs/build_report.json
          
          # 检查构建是否成功 - 使用单行Python脚本
          if python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; exit(1 if failed else 0)"; then
            echo "✅ All packages built successfully"
          else
            echo "❌ Some packages failed to build"
            python3 -c "import json; report = json.load(open('.output_logs/build_report.json')); failed = [pkg for pkg, result in report.items() if not result.get('success', False)]; print(f'Failed packages: {failed}') if failed else None"
            exit 1
          fi
        else
          echo "❌ Build report not found"
          exit 1
        fi
        
    - name: Package build artifacts
      run: |
        cd .output
        # 创建 pack_{arch}.tar.gz 包
        tar -czf ../pack_${{ matrix.arch }}.tar.gz .
        cd ..
        
        # 显示包的大小和内容
        echo "Package size:"
        ls -lh pack_${{ matrix.arch }}.tar.gz
        
        echo "Package contents:"
        tar -tzf pack_${{ matrix.arch }}.tar.gz | head -20
        
    - name: Generate checksums
      run: |
        # 生成 SHA256 校验和
        sha256sum pack_${{ matrix.arch }}.tar.gz > pack_${{ matrix.arch }}.tar.gz.sha256
        
        echo "Checksums:"
        cat pack_${{ matrix.arch }}.tar.gz.sha256
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kvcache-packages-${{ matrix.arch }}
        path: |
          pack_${{ matrix.arch }}.tar.gz
          pack_${{ matrix.arch }}.tar.gz.sha256
          .output_logs/build_summary.txt
          .output_logs/build_report.json
        retention-days: 30

    # 每个架构构建完成后立即创建或更新release
    - name: Create or Update Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        allowUpdates: true  # 允许更新已存在的release
        updateOnlyUnreleased: false  # 允许更新已发布的release
        generateReleaseNotes: true
        body: |
          ## KVCache C++ Packages Release ${{ github.ref_name }}
          
          This release contains pre-built C++ packages for multiple architectures.
          
          ### 📦 Available Packages:
          - `pack_amd64.tar.gz` - x86_64 packages (Building: ${{ matrix.arch == 'amd64' && '✅ Complete' || '🔄 In Progress' }})
          - `pack_arm64.tar.gz` - ARM64 packages (Building: ${{ matrix.arch == 'arm64' && '✅ Complete' || '🔄 In Progress' }})
          
          ### 📚 Included Libraries:
          - etcd-cpp-apiv3 (master branch)
          - gflags (master branch)
          - glog (v0.6.0)
          - jsoncpp (master branch)
          - rdma-core (master branch)
          - yalantinglibs (main branch)
          
          ### 🚀 Usage:
          1. Download the appropriate package for your architecture
          2. Verify integrity: `sha256sum -c pack_{arch}.tar.gz.sha256`
          3. Extract: `tar -xzf pack_{arch}.tar.gz`
          4. Add to your CMake project:
             ```cmake
             set(CMAKE_PREFIX_PATH "/path/to/extracted" ${CMAKE_PREFIX_PATH})
             find_package(YourPackage REQUIRED)
             ```
          
          ### 🔧 Build Information:
          - Built on Ubuntu 20.04
          - Compiled with GCC 10
          - C++17/C++20 standard support
          - Static libraries included
          
          ### 🔐 Security:
          SHA256 checksums are provided for integrity verification.
          
          ---
          📦 **${{ matrix.arch }} package**: Ready for download!
        artifacts: |
          pack_${{ matrix.arch }}.tar.gz
          pack_${{ matrix.arch }}.tar.gz.sha256
          .output_logs/build_summary.txt
          .output_logs/build_report.json
        token: ${{ secrets.GITHUB_TOKEN }} 